{"version":3,"sources":["components/ControlPanel.js","components/Family.js","components/Population.js","components/InitialPop.js","components/Generations.js","algorithm/Algorithm.js","App.js","serviceWorker.js","index.js"],"names":["ControlPanel","props","handleChange","bind","handleColorChange","handleReset","handleSubmit","event","target","value","parseInt","name","state","this","onControlPanelChange","color","optimal","rgb","generations","preventDefault","onControlPanelSubmit","className","onSubmit","type","popSize","onChange","min","deathCutoff","maxGens","displayInterval","disableAlpha","onClick","React","Component","Family","mommy","Spectra","hex","daddy","child","style","backgroundColor","fitness","Population","pop","population","listPop","individuals","map","individual","generation","Generations","genList","filter","InitialPop","key","toString","Algorithm","max","Math","floor","random","r","getRandomInt","g","b","spectraLab","labObject","L","l","A","a","B","valueLAB","convertToLab","optimalLAB","DeltaE","getDeltaE00","toFixed","i","newColor","push","calculateFitness","prevGen","nextGen","death","selectionPop","selection","crossover","mutation","updateCounter","pairs","pair","randWeightedInd","nextPair","weightSums","x","reduce","acc","cur","randNum","j","length","console","log","sel","nextPop","nextInd","mate","mommyGene","colorToGene","daddyGene","crossPnt","babyGene","substring","geneToColor","pad","num","s","gene","ind","sign","mutationVal","delta","round","rand_bm","skew","u","v","sqrt","cos","PI","pow","App","alg","handleControlPanelChange","handleControlPanelSubmit","setState","initialGen","generateStartingPop","genInterval","setInterval","gens","clearInterval","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.21d8e41e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ChromePicker } from 'react-color';\r\nimport '../components/ControlPanel.css';\r\n\r\nclass ControlPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n        this.handleReset = this.handleReset.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    // handles changes to the control panel except color changes\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = parseInt(target.value);\r\n        const name = target.name;\r\n\r\n        const state = {\r\n            [name]: value,\r\n        };\r\n\r\n        this.props.onControlPanelChange(state);\r\n    }\r\n\r\n    // handles color changes on control panel\r\n    handleColorChange(color) {\r\n        const state = {\r\n            optimal: color.rgb,\r\n        };\r\n        this.props.onControlPanelChange(state);\r\n    }\r\n\r\n    handleReset() {\r\n        const state = {\r\n            generations: []\r\n        };\r\n        this.props.onControlPanelChange(state);\r\n    }\r\n\r\n    // begins the algorithm\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.onControlPanelSubmit();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ControlPanel\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Population Size:\r\n                        <input name=\"popSize\" type=\"number\" value={this.props.popSize} onChange={this.handleChange} min=\"2\"/>\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Death Cutoff:\r\n                        <input name=\"deathCutoff\" type=\"number\" value={this.props.deathCutoff} onChange={this.handleChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Max Generations:\r\n                        <input name=\"maxGens\" type=\"number\" value={this.props.maxGens} onChange={this.handleChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Display Every:\r\n                        <input name=\"displayInterval\" type=\"number\" value={this.props.displayInterval} onChange={this.handleChange} min=\"1\"/>\r\n                    </label>\r\n                    <br />\r\n                    <label className={'colorPicker'}>\r\n                        Optimal Color:\r\n                        <ChromePicker\r\n                            className={'chromePicker'}\r\n                            color={this.props.optimal}\r\n                            onChange={this.handleColorChange}\r\n                            disableAlpha={true}\r\n                        />\r\n                    </label>\r\n                    <br/>\r\n                    <input type=\"submit\" value=\"Start\" />\r\n                    <br/>\r\n                    <input type=\"button\" value=\"Reset\" onClick={this.handleReset}/>\r\n                </form>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ControlPanel;\r\n","import React from 'react';\r\nimport '../components/Family.css';\r\nimport Spectra from \"spectra\";\r\n\r\n\r\nfunction Family(props) {\r\n    // convert to hex to use in CSS\r\n    const mommy = Spectra(props.mommy.value).hex();\r\n    const daddy = Spectra(props.daddy.value).hex();\r\n    const child = Spectra(props.child.value).hex();\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <div>\r\n                <div className={'individual'} style={{backgroundColor: mommy}}>{props.mommy.fitness}</div>\r\n                <div className={'individual'} style={{backgroundColor: daddy}}>{props.daddy.fitness}</div>\r\n            </div>\r\n            <div className={'arrow'}>&#8594;</div>\r\n            <div>\r\n                <div className={'individual'} style={{backgroundColor: child}}>{props.child.fitness}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Family;\r\n","import React from 'react';\r\nimport '../components/Population.css';\r\nimport Family from \"./Family\";\r\n\r\nfunction Population(props) {\r\n    const pop = props.population;\r\n\r\n    const listPop = pop.individuals.map((individual) =>\r\n        <Family\r\n            mommy={individual.mommy}\r\n            daddy={individual.daddy}\r\n            child={individual}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className=\"Population\">\r\n            Generation: {pop.generation}\r\n            <div className=\"PopulationList\">\r\n                {listPop}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Population;","import React from 'react';\r\nimport Spectra from 'spectra';\r\n\r\nfunction Population(props) {\r\n    const pop = props.population;\r\n    const listPop = pop.individuals.map((individual) => {\r\n        // convert to hex to use in CSS\r\n        const color = Spectra(individual.value).hex();\r\n\r\n        return (\r\n            <div className=\"container\" style={{backgroundColor: color}}>\r\n                {individual.fitness}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"Population\">\r\n            Initial Population\r\n            <div className=\"PopulationList\">\r\n                {listPop}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Population;\r\n","import React from 'react';\r\nimport Population from './Population.js';\r\nimport InitialPop from './InitialPop.js';\r\nimport '../components/Generations.css';\r\n\r\nfunction Generations(props) {\r\n\r\n    const genList = props.generations.filter((pop) => {\r\n        // first, only show every nth generation\r\n        return pop.generation % props.displayInterval === 0;\r\n    }).map((pop) => {\r\n        // then, render as components\r\n        // render the first generation differently\r\n        if (pop.generation === 0) {\r\n            return <InitialPop key={pop.generation.toString()} population={pop} />\r\n        }\r\n        return <Population key={pop.generation.toString()} population={pop}/>\r\n    });\r\n\r\n    if (genList[0]) {\r\n        return (\r\n            <div>\r\n                <hr />\r\n                <div className=\"Generations\">\r\n                    {genList}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else return null;\r\n}\r\n\r\nexport default Generations;\r\n","import DeltaE from 'delta-e';\r\nimport Spectra from 'spectra';\r\n\r\nclass Algorithm {\r\n\r\n    getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    // generates a colour in RGB colour space\r\n    newColor() {\r\n        let r = this.getRandomInt(0, 255);\r\n        let g = this.getRandomInt(0, 255);\r\n        let b = this.getRandomInt(0, 255);\r\n        return {r: r, g: g, b: b};\r\n    }\r\n\r\n    // convert RGB to LAB\r\n    convertToLab(color) {\r\n        /*\r\n            It seems like DeltaE doesn't like the LAB object provided by Spectra.\r\n            So this function converts them so they work together nicely :D\r\n         */\r\n        const spectraLab = Spectra(color).labObject();\r\n        const lab = {\r\n            L: spectraLab.l,\r\n            A: spectraLab.a,\r\n            B: spectraLab.b,\r\n        }\r\n        return lab;\r\n    }\r\n\r\n    calculateFitness(value, optimal) {\r\n        // convert to LAB for comparison\r\n        const valueLAB = this.convertToLab(value);\r\n        const optimalLAB = this.convertToLab(optimal);\r\n\r\n        // DeltaE is 0 when there's no difference\r\n        // I subtract from 100 so that 100 is the optimal fitness\r\n        const fitness = 100 - DeltaE.getDeltaE00(valueLAB, optimalLAB);\r\n\r\n        return fitness.toFixed(1);\r\n    }\r\n\r\n    generateStartingPop(popSize, optimal) {\r\n        // initialize population\r\n        let population = {\r\n            generation: 0,\r\n            individuals: [],\r\n        };\r\n\r\n        // add individuals to population\r\n        for (let i = 0; i < popSize; i++) {\r\n            // create new color\r\n            const value = this.newColor();\r\n\r\n            population.individuals.push({\r\n                value: value,\r\n                fitness: this.calculateFitness(value, optimal),\r\n            });\r\n        }\r\n\r\n        return population;\r\n    }\r\n\r\n    // compute the next generation\r\n    nextGen(prevGen, popSize, optimal, deathCutoff) {\r\n\r\n        let nextGen = this.death(prevGen, deathCutoff);\r\n\r\n        // the population is grouped into pairs for breeding\r\n        // I temporarily change the object for the selection\r\n        let selectionPop = this.selection(nextGen, popSize);\r\n\r\n        // the pairs will now breed\r\n        nextGen = this.crossover(selectionPop, optimal);\r\n\r\n        // add mutations\r\n        nextGen = this.mutation(nextGen);\r\n\r\n        // update counter\r\n        nextGen = this.updateCounter(nextGen);\r\n\r\n        return nextGen;\r\n    }\r\n\r\n    // remove individuals with fitness below cutoff\r\n    death(pop, deathCutoff) {\r\n        pop.individuals = pop.individuals.filter(i => i.fitness >= deathCutoff);\r\n        return pop;\r\n    }\r\n\r\n    selection(pop, popSize) {\r\n        // selectionPop object contains pairs for the crossover step later on\r\n        const selectionPop = {\r\n            generation: pop.generation,\r\n            pairs: [],\r\n        };\r\n\r\n        /*\r\n            Population breeds until popSize is full.\r\n            The more fit, the more likely an individual is to breed.\r\n         */\r\n        const individuals = pop.individuals;\r\n        for (let i = 0; i < popSize; i++) {\r\n\r\n            // pair is two individuals who will mate\r\n            let pair = []; //\r\n\r\n            const individual = this.randWeightedInd(individuals);\r\n            pair.push(individual); // push random individual to pair\r\n\r\n            // ensure an individual is not paired with itself\r\n            // this is really not ideal TODO figure out a better way\r\n            let nextPair;\r\n            do {\r\n                nextPair = this.randWeightedInd(individuals); // next in pair\r\n                pair[1] = nextPair; // assign random individual to next spot\r\n            } while (nextPair === pair[0]) // do this until the pair has distinct members\r\n\r\n            // once that's done, push it to pairs\r\n            selectionPop.pairs.push(pair);\r\n        }\r\n        return selectionPop;\r\n    }\r\n\r\n    // returns an individual randomly based on their fitness\r\n    randWeightedInd(individuals) {\r\n        // sum of fitness\r\n        const indFitness = individuals.map(x => parseInt(x.fitness));\r\n        const weightSums = indFitness.reduce((acc, cur) => acc + cur);\r\n        let randNum = this.getRandomInt(0, weightSums); // random value from 0 to weightSums\r\n\r\n        for (let j = 0; j < individuals.length; j++) {\r\n            if (randNum < individuals[j].fitness) {\r\n                return individuals[j];\r\n            }\r\n            randNum -= individuals[j].fitness;\r\n        }\r\n\r\n        // if loop ends with no return, return last element\r\n        // this introduces a bias, but it shouldn't be too bad\r\n        console.log(\"reached end in weightedInd, defaulting to last element\")\r\n        return individuals[individuals.length - 1];\r\n    }\r\n\r\n    // combine color values\r\n    crossover(sel, optimal) {\r\n        // recreate population object\r\n        let nextPop = {\r\n            generation: sel.generation,\r\n            individuals: [],\r\n        };\r\n\r\n        // combine each pair into one individual\r\n        for (let i = 0; i < sel.pairs.length; i++) {\r\n            let nextInd = this.mate(sel.pairs[i], optimal);\r\n            nextPop.individuals.push(nextInd);\r\n        }\r\n\r\n        return nextPop;\r\n    }\r\n\r\n    // breed one pair\r\n    mate(pair, optimal) {\r\n        const mommy = pair[0]; // mommy and daddy have no meaning\r\n        const daddy = pair[1]; // gender does not exist in this universe\r\n\r\n\r\n        /*\r\n            Convert all color values to string, and pad with 0s to reach 3 digits.\r\n            CrossPnt chooses where to cross the parent's color info.\r\n            --> from 1 to 8 to ensure baby is not the exact same as one of the parents\r\n            Then the string will be split back into color info\r\n        */\r\n        const mommyGene = this.colorToGene(mommy.value);\r\n        const daddyGene = this.colorToGene(daddy.value);\r\n\r\n        const crossPnt = this.getRandomInt(1, 8);\r\n        const babyGene = mommyGene.substring(0, crossPnt) + daddyGene.substring(crossPnt);\r\n\r\n        const value = this.geneToColor(babyGene);\r\n\r\n        const baby = {\r\n            value: value,\r\n            fitness: this.calculateFitness(value, optimal),\r\n            mommy: {\r\n                value: mommy.value,\r\n                fitness: mommy.fitness,\r\n            },\r\n            daddy: {\r\n                value: daddy.value,\r\n                fitness: daddy.fitness,\r\n            },\r\n        }\r\n\r\n        return baby;\r\n    }\r\n\r\n    // return string of all padded rgb values\r\n    colorToGene(color) {\r\n        const R = this.pad(color.r);\r\n        const G = this.pad(color.g);\r\n        const B = this.pad(color.b);\r\n        return R + G + B;\r\n    }\r\n\r\n    // add 0s before number until it's 3 digits long and return as string\r\n    pad(num) {\r\n        let s = num.toString();\r\n\r\n        for (let i = s.length; i < 3; i++) {\r\n            s = \"0\" + s;\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    // takes gene string, converts to RGB color\r\n    geneToColor(gene) {\r\n        const color = {\r\n            r: parseInt(gene.substring(0, 3)),\r\n            g: parseInt(gene.substring(3, 6)),\r\n            b: parseInt(gene.substring(6, 9)),\r\n        };\r\n        return color;\r\n    }\r\n\r\n    // occasionally add or subtract random amounts from the individual's RGB values\r\n    mutation(pop) {\r\n\r\n        for (let i = 0; i < pop.individuals.length; i++) {\r\n            const ind = pop.individuals[i];\r\n\r\n            const mutationProb = 0.01;\r\n            if (Math.random() < mutationProb) {\r\n\r\n                const sign = Math.random() < 0.5 ? -1 : 1; // adding or subtracting?\r\n\r\n                const mutationVal = this.getRandomInt(0, 2); // which value will be modified? (R, G, or B)\r\n\r\n                // a random integer that tends to be fairly small, but can be larger\r\n                const delta = Math.round(this.rand_bm(0, 255, 5));\r\n\r\n                switch(mutationVal) {\r\n                    case 0:\r\n                        ind.value.r = ind.value.r + (delta * sign);\r\n                        break;\r\n                    case 1:\r\n                        ind.value.g = ind.value.b + (delta * sign);\r\n                        break;\r\n                    case 2:\r\n                        ind.value.b = ind.value.b + (delta * sign);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return pop;\r\n    }\r\n\r\n    // Box–Muller transform to give random numbers that tend to be in a specific range, but can be larger or smaller.\r\n    // from https://stackoverflow.com/a/49434653\r\n    rand_bm (min, max, skew) {\r\n        let u = 0, v = 0;\r\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while(v === 0) v = Math.random();\r\n        let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n\r\n        num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n        if (num > 1 || num < 0) num = this.rand_bm(min, max, skew); // re sample between 0 and 1 if out of range\r\n        num = Math.pow(num, skew); // Skew\r\n        num *= max - min; // Stretch to fill range\r\n        num += min; // offset to min\r\n        return num;\r\n    }\r\n\r\n    // this could have been done earlier, but I make it it's own step for clarity\r\n    updateCounter(pop) {\r\n        return {\r\n            generation: pop.generation + 1,\r\n            individuals: pop.individuals,\r\n        };\r\n    }\r\n}\r\n\r\nexport default Algorithm;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport ControlPanel from \"./components/ControlPanel\";\r\nimport Generations from \"./components/Generations\";\r\nimport Algorithm from \"./algorithm/Algorithm\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.alg = new Algorithm();\r\n\r\n        this.state = {\r\n            popSize: 20,\r\n            deathCutoff: 5, // determines min fitness to survive\r\n            maxGens: 15, // prevent infinite loops (hopefully less necessary once convergence is written)\r\n            displayInterval: 5, // show every n generations\r\n            optimal: this.alg.newColor(),    // Optimal individual in environment (in RGB, but converted to LAB for fitness calculation)\r\n            generations: [],\r\n        }\r\n\r\n        this.handleControlPanelChange = this.handleControlPanelChange.bind(this);\r\n        this.handleControlPanelSubmit = this.handleControlPanelSubmit.bind(this);\r\n    }\r\n\r\n\r\n    handleControlPanelChange(state) {\r\n        this.setState(state);\r\n    }\r\n\r\n    handleControlPanelSubmit(event) {\r\n        const initialGen = [this.alg.generateStartingPop(this.state.popSize, this.state.optimal)];\r\n\r\n        this.setState({\r\n            generations: initialGen,\r\n        });\r\n\r\n        this.genInterval = setInterval(\r\n            () => this.nextGen(),\r\n            0,\r\n        );\r\n    }\r\n\r\n    nextGen() {\r\n        const gens = this.state.generations;\r\n        const prevGen = gens[gens.length - 1];\r\n\r\n        // stop after max number of generations\r\n        if (prevGen.generation >= this.state.maxGens) {\r\n            clearInterval(this.genInterval);\r\n            return;\r\n        }\r\n\r\n        const popSize = this.state.popSize;\r\n        const optimal = this.state.optimal;\r\n        const deathCutoff = this.state.deathCutoff;\r\n\r\n\r\n        const nextGen = this.alg.nextGen(prevGen, popSize, optimal, deathCutoff);\r\n        gens.push(nextGen);\r\n        this.setState({\r\n            generations: gens,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>Genetic Algorithm</h1>\r\n                <h5>By Aiden Kerr</h5>\r\n                <a href=\"https://github.com/AidenKerr/genetic-v2/blob/master/README.md\">What is this? Click Here!</a>\r\n                <ControlPanel\r\n                    popSize={this.state.popSize}\r\n                    deathCutoff={this.state.deathCutoff}\r\n                    maxGens={this.state.maxGens}\r\n                    displayInterval={this.state.displayInterval}\r\n                    optimal={this.state.optimal}\r\n                    onControlPanelChange={this.handleControlPanelChange}\r\n                    onControlPanelSubmit={this.handleControlPanelSubmit}\r\n                />\r\n                <Generations\r\n                    generations={this.state.generations}\r\n                    displayInterval={this.state.displayInterval}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}