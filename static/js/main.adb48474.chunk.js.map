{"version":3,"sources":["components/ControlPanel.js","components/Family.js","components/Population.js","components/InitialPop.js","components/Generations.js","algorithm/Algorithm.js","App.js","serviceWorker.js","index.js"],"names":["ControlPanel","props","handleChange","bind","handleColorChange","handleSubmit","event","target","value","parseInt","name","state","this","onControlPanelChange","color","tempState","optimal","rgb","preventDefault","onControlPanelSubmit","className","onSubmit","type","popSize","onChange","deathCutoff","maxGens","disableAlpha","React","Component","Family","mommy","Spectra","hex","daddy","child","style","backgroundColor","fitness","Population","pop","population","listPop","individuals","map","individual","generation","Generations","genList","generations","InitialPop","key","toString","Algorithm","min","max","Math","floor","random","r","getRandomInt","g","b","spectraLab","labObject","L","l","A","a","B","valueLAB","convertToLab","optimalLAB","DeltaE","getDeltaE00","toFixed","i","newColor","push","calculateFitness","prevGen","nextGen","death","selectionPop","selection","crossover","mutation","updateCounter","filter","pairs","pair","randWeightedInd","nextPair","weightSums","x","reduce","acc","cur","randNum","j","length","console","log","sel","nextPop","nextInd","mate","mommyGene","colorToGene","daddyGene","crossPnt","babyGene","substring","geneToColor","pad","num","s","gene","ind","sign","mutationVal","delta","round","rand_bm","skew","u","v","sqrt","cos","PI","pow","App","alg","handleControlPanelChange","handleControlPanelSubmit","setState","generateStartingPop","genInterval","setInterval","gens","clearInterval","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.adb48474.chunk.js","sourcesContent":["import React from 'react';\r\nimport { ChromePicker } from 'react-color';\r\nimport '../components/ControlPanel.css';\r\n\r\nclass ControlPanel extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n\r\n    // handles changes to the control panel except color changes\r\n    handleChange(event) {\r\n        const target = event.target;\r\n        const value = parseInt(target.value);\r\n        const name = target.name;\r\n\r\n        const state = {\r\n            [name]: value,\r\n        };\r\n\r\n        this.props.onControlPanelChange(state);\r\n    }\r\n\r\n    // handles color changes on control panel\r\n    handleColorChange(color) {\r\n        const tempState = {\r\n            optimal: color.rgb,\r\n        };\r\n        this.props.onControlPanelChange(tempState);\r\n    }\r\n\r\n    // begins the algorithm\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.onControlPanelSubmit();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ControlPanel\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label>\r\n                        Population Size:\r\n                        <input name=\"popSize\" type=\"number\" value={this.props.popSize} onChange={this.handleChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Death Cutoff:\r\n                        <input name=\"deathCutoff\" type=\"number\" value={this.props.deathCutoff} onChange={this.handleChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Max Generations:\r\n                        <input name=\"maxGens\" type=\"number\" value={this.props.maxGens} onChange={this.handleChange} />\r\n                    </label>\r\n                    <br />\r\n                    <label>\r\n                        Optimal Color:\r\n                        <ChromePicker\r\n                            color={this.props.optimal}\r\n                            onChange={this.handleColorChange}\r\n                            disableAlpha={true}\r\n                        />\r\n                    </label>\r\n                    <br/>\r\n                    <input type=\"submit\" value=\"start\" />\r\n                </form>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ControlPanel;\r\n","import React from 'react';\r\nimport '../components/Family.css';\r\nimport Spectra from \"spectra\";\r\n\r\n\r\nfunction Family(props) {\r\n    // convert to hex to use in CSS\r\n    const mommy = Spectra(props.mommy.value).hex();\r\n    const daddy = Spectra(props.daddy.value).hex();\r\n    const child = Spectra(props.child.value).hex();\r\n\r\n    return (\r\n        <div className={'container'}>\r\n            <div>\r\n                <div className={'individual'} style={{backgroundColor: mommy}}></div>\r\n                <div>{props.mommy.fitness}</div>\r\n                <div className={'individual'} style={{backgroundColor: daddy}}></div>\r\n                <div>{props.daddy.fitness}</div>\r\n            </div>\r\n            --->\r\n            <div>\r\n                <div className={'individual'} style={{backgroundColor: child}}></div>\r\n                <div>{props.child.fitness}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Family;\r\n","import React from 'react';\r\nimport '../components/Population.css';\r\nimport Family from \"./Family\";\r\n\r\nfunction Population(props) {\r\n    const pop = props.population;\r\n\r\n    const listPop = pop.individuals.map((individual) =>\r\n        <Family\r\n            mommy={individual.mommy}\r\n            daddy={individual.daddy}\r\n            child={individual}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className=\"Population\">\r\n            Generation: {pop.generation}\r\n            <div className=\"PopulationList\">\r\n                {listPop}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Population;","import React from 'react';\r\nimport Spectra from 'spectra';\r\n\r\nfunction Population(props) {\r\n    const pop = props.population;\r\n    const listPop = pop.individuals.map((individual) => {\r\n        // convert to hex to use in CSS\r\n        const color = Spectra(individual.value).hex();\r\n\r\n        return (\r\n            <div className=\"container\" style={{backgroundColor: color}}>\r\n                {individual.fitness}\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"Population\">\r\n            Initial Population\r\n            <div className=\"PopulationList\">\r\n                {listPop}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Population;\r\n","import React from 'react';\r\nimport Population from './Population.js';\r\nimport InitialPop from './InitialPop.js';\r\nimport '../components/Generations.css';\r\n\r\nfunction Generations(props) {\r\n\r\n    const genList = props.generations.map((pop) => {\r\n        // render the first generation differently\r\n        if (pop.generation === 0) {\r\n            return <InitialPop key={pop.generation.toString()} population={pop} />\r\n        }\r\n        return <Population key={pop.generation.toString()} population={pop}/>\r\n    });\r\n\r\n    return (\r\n        <div className=\"Generations\">\r\n            {genList[0] ? genList : \"Press Start!\"}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Generations;\r\n","import DeltaE from 'delta-e';\r\nimport Spectra from 'spectra';\r\n\r\nclass Algorithm {\r\n\r\n    getRandomInt(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    // generates a colour in RGB colour space\r\n    newColor() {\r\n        let r = this.getRandomInt(0, 255);\r\n        let g = this.getRandomInt(0, 255);\r\n        let b = this.getRandomInt(0, 255);\r\n        return {r: r, g: g, b: b};\r\n    }\r\n\r\n    // convert RGB to LAB\r\n    convertToLab(color) {\r\n        /*\r\n            It seems like DeltaE doesn't like the LAB object provided by Spectra.\r\n            So this function converts them so they work together nicely :D\r\n         */\r\n        const spectraLab = Spectra(color).labObject();\r\n        const lab = {\r\n            L: spectraLab.l,\r\n            A: spectraLab.a,\r\n            B: spectraLab.b,\r\n        }\r\n        return lab;\r\n    }\r\n\r\n    calculateFitness(value, optimal) {\r\n        // convert to LAB for comparison\r\n        const valueLAB = this.convertToLab(value);\r\n        const optimalLAB = this.convertToLab(optimal);\r\n\r\n        // DeltaE is 0 when there's no difference\r\n        // I subtract from 100 so that 100 is the optimal fitness\r\n        const fitness = 100 - DeltaE.getDeltaE00(valueLAB, optimalLAB);\r\n\r\n        return fitness.toFixed(1);\r\n    }\r\n\r\n    generateStartingPop(popSize, optimal) {\r\n        // initialize population\r\n        let population = {\r\n            generation: 0,\r\n            individuals: [],\r\n        };\r\n\r\n        // add individuals to population\r\n        for (let i = 0; i < popSize; i++) {\r\n            // create new color\r\n            const value = this.newColor();\r\n\r\n            population.individuals.push({\r\n                value: value,\r\n                fitness: this.calculateFitness(value, optimal),\r\n            });\r\n        }\r\n\r\n        return population;\r\n    }\r\n\r\n    // compute the next generation\r\n    nextGen(prevGen, popSize, optimal, deathCutoff) {\r\n\r\n        let nextGen = this.death(prevGen, deathCutoff);\r\n\r\n        // the population is grouped into pairs for breeding\r\n        // I temporarily change the object for the selection\r\n        let selectionPop = this.selection(nextGen, popSize);\r\n\r\n        // the pairs will now breed\r\n        nextGen = this.crossover(selectionPop, optimal);\r\n\r\n        // add mutations\r\n        nextGen = this.mutation(nextGen);\r\n\r\n        // update counter\r\n        nextGen = this.updateCounter(nextGen);\r\n\r\n        return nextGen;\r\n    }\r\n\r\n    // remove individuals with fitness below cutoff\r\n    death(pop, deathCutoff) {\r\n        pop.individuals = pop.individuals.filter(i => i.fitness >= deathCutoff);\r\n        return pop;\r\n    }\r\n\r\n    selection(pop, popSize) {\r\n        // selectionPop object contains pairs for the crossover step later on\r\n        const selectionPop = {\r\n            generation: pop.generation,\r\n            pairs: [],\r\n        };\r\n\r\n        /*\r\n            Population breeds until popSize is full.\r\n            The more fit, the more likely an individual is to breed.\r\n         */\r\n        const individuals = pop.individuals;\r\n        for (let i = 0; i < popSize; i++) {\r\n\r\n            // pair is two individuals who will mate\r\n            let pair = []; //\r\n\r\n            const individual = this.randWeightedInd(individuals);\r\n            pair.push(individual); // push random individual to pair\r\n\r\n            // ensure an individual is not paired with itself\r\n            // this is really not ideal TODO figure out a better way\r\n            let nextPair;\r\n            do {\r\n                nextPair = this.randWeightedInd(individuals); // next in pair\r\n                pair[1] = nextPair; // assign random individual to next spot\r\n            } while (nextPair === pair[0]) // do this until the pair has distinct members\r\n\r\n            // once that's done, push it to pairs\r\n            selectionPop.pairs.push(pair);\r\n        }\r\n        return selectionPop;\r\n    }\r\n\r\n    // returns an individual randomly based on their fitness\r\n    randWeightedInd(individuals) {\r\n        // sum of fitness\r\n        const indFitness = individuals.map(x => parseInt(x.fitness));\r\n        const weightSums = indFitness.reduce((acc, cur) => acc + cur);\r\n        let randNum = this.getRandomInt(0, weightSums); // random value from 0 to weightSums\r\n\r\n        for (let j = 0; j < individuals.length; j++) {\r\n            if (randNum < individuals[j].fitness) {\r\n                return individuals[j];\r\n            }\r\n            randNum -= individuals[j].fitness;\r\n        }\r\n\r\n        // if loop ends with no return, return last element\r\n        // this introduces a bias, but it shouldn't be too bad\r\n        console.log(\"reached end in weightedInd, defaulting to last element\")\r\n        return individuals[individuals.length - 1];\r\n    }\r\n\r\n    // combine color values\r\n    crossover(sel, optimal) {\r\n        // recreate population object\r\n        let nextPop = {\r\n            generation: sel.generation,\r\n            individuals: [],\r\n        };\r\n\r\n        // combine each pair into one individual\r\n        for (let i = 0; i < sel.pairs.length; i++) {\r\n            let nextInd = this.mate(sel.pairs[i], optimal);\r\n            nextPop.individuals.push(nextInd);\r\n        }\r\n\r\n        return nextPop;\r\n    }\r\n\r\n    // breed one pair\r\n    mate(pair, optimal) {\r\n        const mommy = pair[0]; // mommy and daddy have no meaning\r\n        const daddy = pair[1]; // gender does not exist in this universe\r\n\r\n\r\n        /*\r\n            Convert all color values to string, and pad with 0s to reach 3 digits.\r\n            CrossPnt chooses where to cross the parent's color info.\r\n            --> from 1 to 8 to ensure baby is not the exact same as one of the parents\r\n            Then the string will be split back into color info\r\n        */\r\n        const mommyGene = this.colorToGene(mommy.value);\r\n        const daddyGene = this.colorToGene(daddy.value);\r\n\r\n        const crossPnt = this.getRandomInt(1, 8);\r\n        const babyGene = mommyGene.substring(0, crossPnt) + daddyGene.substring(crossPnt);\r\n\r\n        const value = this.geneToColor(babyGene);\r\n\r\n        const baby = {\r\n            value: value,\r\n            fitness: this.calculateFitness(value, optimal),\r\n            mommy: {\r\n                value: mommy.value,\r\n                fitness: mommy.fitness,\r\n            },\r\n            daddy: {\r\n                value: daddy.value,\r\n                fitness: daddy.fitness,\r\n            },\r\n        }\r\n\r\n        return baby;\r\n    }\r\n\r\n    // return string of all padded rgb values\r\n    colorToGene(color) {\r\n        const R = this.pad(color.r);\r\n        const G = this.pad(color.g);\r\n        const B = this.pad(color.b);\r\n        return R + G + B;\r\n    }\r\n\r\n    // add 0s before number until it's 3 digits long and return as string\r\n    pad(num) {\r\n        let s = num.toString();\r\n\r\n        for (let i = s.length; i < 3; i++) {\r\n            s = \"0\" + s;\r\n        }\r\n\r\n        return s;\r\n    }\r\n\r\n    // takes gene string, converts to RGB color\r\n    geneToColor(gene) {\r\n        const color = {\r\n            r: parseInt(gene.substring(0, 3)),\r\n            g: parseInt(gene.substring(3, 6)),\r\n            b: parseInt(gene.substring(6, 9)),\r\n        };\r\n        return color;\r\n    }\r\n\r\n    // occasionally add or subtract random amounts from the individual's RGB values\r\n    mutation(pop) {\r\n\r\n        for (let i = 0; i < pop.individuals.length; i++) {\r\n            const ind = pop.individuals[i];\r\n\r\n            const mutationProb = 0.01;\r\n            if (Math.random() < mutationProb) {\r\n\r\n                const sign = Math.random() < 0.5 ? -1 : 1; // adding or subtracting?\r\n\r\n                const mutationVal = this.getRandomInt(0, 2); // which value will be modified? (R, G, or B)\r\n\r\n                // a random integer that tends to be fairly small, but can be larger\r\n                const delta = Math.round(this.rand_bm(0, 255, 5));\r\n\r\n                switch(mutationVal) {\r\n                    case 0:\r\n                        ind.value.r = ind.value.r + (delta * sign);\r\n                        break;\r\n                    case 1:\r\n                        ind.value.g = ind.value.b + (delta * sign);\r\n                        break;\r\n                    case 2:\r\n                        ind.value.b = ind.value.b + (delta * sign);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return pop;\r\n    }\r\n\r\n    // Box–Muller transform to give random numbers that tend to be in a specific range, but can be larger or smaller.\r\n    // from https://stackoverflow.com/a/49434653\r\n    rand_bm (min, max, skew) {\r\n        let u = 0, v = 0;\r\n        while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n        while(v === 0) v = Math.random();\r\n        let num = Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n\r\n        num = num / 10.0 + 0.5; // Translate to 0 -> 1\r\n        if (num > 1 || num < 0) num = this.rand_bm(min, max, skew); // re sample between 0 and 1 if out of range\r\n        num = Math.pow(num, skew); // Skew\r\n        num *= max - min; // Stretch to fill range\r\n        num += min; // offset to min\r\n        return num;\r\n    }\r\n\r\n    // this could have been done earlier, but I make it it's own step for clarity\r\n    updateCounter(pop) {\r\n        return {\r\n            generation: pop.generation + 1,\r\n            individuals: pop.individuals,\r\n        };\r\n    }\r\n}\r\n\r\nexport default Algorithm;\r\n","import React from 'react';\nimport './App.css';\nimport ControlPanel from \"./components/ControlPanel\";\nimport Generations from \"./components/Generations\";\nimport Algorithm from \"./algorithm/Algorithm\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.alg = new Algorithm();\n\n        this.state = {\n            popSize: 20,\n            deathCutoff: 5, // determines min fitness to survive\n            maxGens: 15, // prevent infinite loops (hopefully less necessary once convergence is written)\n            optimal: this.alg.newColor(),    // Optimal individual in environment (in RGB, but converted to LAB for fitness calculation)\n            generations: [],\n        }\n\n        this.handleControlPanelChange = this.handleControlPanelChange.bind(this);\n        this.handleControlPanelSubmit = this.handleControlPanelSubmit.bind(this);\n    }\n\n\n    handleControlPanelChange(state) {\n        this.setState(state);\n    }\n\n    handleControlPanelSubmit(event) {\n        this.setState({\n            generations: [this.alg.generateStartingPop(this.state.popSize, this.state.optimal)],\n        });\n\n        this.genInterval = setInterval(\n            () => this.nextGen(),\n            0,\n        );\n    }\n\n    nextGen() {\n        const gens = this.state.generations;\n        const prevGen = gens[gens.length - 1];\n\n        // stop after max number of generations\n        if (prevGen.generation >= this.state.maxGens) {\n            clearInterval(this.genInterval);\n            return;\n        }\n\n        const popSize = this.state.popSize;\n        const optimal = this.state.optimal;\n        const deathCutoff = this.state.deathCutoff;\n\n\n        const nextGen = this.alg.nextGen(prevGen, popSize, optimal, deathCutoff);\n        gens.push(nextGen);\n        this.setState({\n            generations: gens,\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <ControlPanel\n                    popSize={this.state.popSize}\n                    deathCutoff={this.state.deathCutoff}\n                    maxGens={this.state.maxGens}\n                    optimal={this.state.optimal}\n                    onControlPanelChange={this.handleControlPanelChange}\n                    onControlPanelSubmit={this.handleControlPanelSubmit}\n                />\n                <Generations\n                    generations={this.state.generations}\n                />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}